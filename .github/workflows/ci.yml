name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type check
      run: npm run typecheck
      
    - name: Lint code
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Run tests with coverage
      run: npm test -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Performance benchmarks
      run: npm run test:performance
      
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Verify build output
      run: |
        test -f dist/index.js
        test -f dist/index.d.ts
        
    - name: Package verification
      run: npm pack --dry-run
      
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for vulnerabilities
      run: npm audit --audit-level=high --production

  documentation:
    name: Documentation Quality
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check documentation links
      run: |
        echo "Running comprehensive documentation link check..."
        node -e "
          import('./dist/tools/check-documentation-links.js').then(module => {
            return module.checkDocumentationLinks({
              documentation_path: './docs',
              check_external_links: true,
              check_internal_links: true,
              timeout_ms: 15000,
              max_concurrent_checks: 5,
              fail_on_broken_links: true,
              output_format: 'detailed'
            });
          }).then(result => {
            if (result.success) {
              const data = result.data;
              console.log('‚úÖ Documentation link check completed successfully');
              console.log(\`üìä Summary:\`);
              console.log(\`  ‚Ä¢ Total links: \${data.summary.totalLinks}\`);
              console.log(\`  ‚Ä¢ Valid links: \${data.summary.validLinks}\`);
              console.log(\`  ‚Ä¢ Broken links: \${data.summary.brokenLinks}\`);
              console.log(\`  ‚Ä¢ Warning links: \${data.summary.warningLinks}\`);
              console.log(\`  ‚Ä¢ Files scanned: \${data.summary.filesScanned}\`);
              console.log(\`  ‚Ä¢ Execution time: \${data.summary.executionTime}ms\`);
              
              if (data.recommendations && data.recommendations.length > 0) {
                console.log(\`\\nüìã Recommendations:\`);
                data.recommendations.forEach(rec => console.log(\`  ‚Ä¢ \${rec}\`));
              }
              
              if (data.summary.brokenLinks > 0) {
                console.log(\`\\n‚ùå Found \${data.summary.brokenLinks} broken links:\`);
                data.results.filter(r => r.status === 'broken').forEach(link => {
                  console.log(\`  ‚Ä¢ \${link.url} in \${link.sourceFile}:\${link.lineNumber || '?'} - \${link.error}\`);
                });
                process.exit(1);
              }
            } else {
              console.log('‚ùå Documentation link check failed:', result.error?.message);
              if (result.error?.details) {
                console.log('Details:', result.error.details);
              }
              process.exit(1);
            }
          }).catch(err => {
            console.log('‚ùå Link check error:', err.message);
            process.exit(1);
          });
        "
        
    - name: Validate documentation structure
      run: |
        echo "Validating documentation structure..."
        # Check for required documentation files
        test -f docs/README.md || (echo "‚ùå Missing docs/README.md" && exit 1)
        test -d docs/adrs || (echo "‚ùå Missing docs/adrs directory" && exit 1)
        
        # Count documentation files
        MD_COUNT=$(find docs -name "*.md" -o -name "*.mdx" | wc -l)
        echo "üìÑ Found $MD_COUNT documentation files"
        
        if [ "$MD_COUNT" -lt 10 ]; then
          echo "‚ö†Ô∏è Warning: Only $MD_COUNT documentation files found"
        else
          echo "‚úÖ Documentation file count looks good"
        fi